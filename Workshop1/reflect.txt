/*
*****************************************************************************
						Workshop 1- Part 2
Full Name  : Ali Rezk
Student ID#: 105593222
Email       arezk1@myseneca.ca
Section    : ZBB
Authenticity Declaration:
I declare this submission is the result of my own work and has not been
shared with any other student or 3rd party content provider. This submitted
piece of work is entirely of my own creation.
*****************************************************************************
*/

In this workshop I gained new information related to internal and external linkages and also command line arguments,
 I haven't used inline command arguments in C++ which was an opportunity for me to learn a new things like implementing
 and writing the prototype for the main function to accept command line arguments.
this workshop also was a refreshment for me to apply the rule of three again in my code.

internal linkage occur in the linking part of the program where the compiler for example: it checks if there is a variable with the same name in the memory
in this workshop the variable s_counter
(line 30 in RideRequest.cpp:int RideRequest::s_counter = 0;)
s_counter was declared as static in the .h file which means this variable only belong to this file even if there is another
variable wih the same name in other files.

external linkage 
unlike internal linkage is when a variable can be used in other files with the use of the extern keyword 
line 22,23 RideRequest.h :
extern double g_taxrate; 
extern double g_discount;
these variables can be used in any file but in order to do so is to include the RideRequest.h file at the top of the file we will be using these
variables in.


what are static variables and how are they useful in your solution:
the static keyword in the s_counter helped in keeping track of the number of RideRequest objects created and this variable will last with 
the lifetime of the program it also helped in numbering the order of each ride request because it is shared among all RideRequest objects and ensures that each
object gets a unique number following the order.

