/*
*****************************************************************************
                        Workshop 8 - Part 2
Full Name  : Ali Rezk
Student ID#: 105593222
Email      : arezk1@myseneca.ca
Section    : ZBB
Authenticity Declaration:
I declare this submission is the result of my own work and has not been
shared with any other student or 3rd party content provider. This submitted
piece of work is entirely of my own creation.
*****************************************************************************
*/
In this workshop I have learned a new concept in C++ which is smart pointers like std::shared_ptr and std::unique_ptr they 
automatically manage the memory of dynamically allocated objects they also handle memory deallocation and help in preventing memory leaks and simplifying memory management.
std::shared_ptr allows more than one pointer to share the ownership of the same object and share the responsibility of owning and cleaning up an object. while std::unique_ptr represents unique ownership it ensures that only one part of the code has the right to own and clean up an object.
ex:
 std::shared_ptr<Profile> newProfile(new Profile(allProfiles[i].m_name, allProfiles[i].m_address, allProfiles[i].m_age));

raw Pointers require manual memory management which lead to potential memory leaks if not handled correctly we need to explicitly allocate and deallocate memory using new and delete.
ex:
 if (!found)
            {
                //if the profile is not found in banned profiles, create a new Profile object and add it to the result
                newProfile = new Profile(allProfiles[i].m_name, allProfiles[i].m_address, allProfiles[i].m_age);

                try {
                    //validate the address of the new profile
                    newProfile->validateAddress();

                    //add the new profile to the result
                    result += newProfile; 
                }
                catch (...) 
                {
                    //delete the new profile if an exception occurs
                    delete newProfile;

                    throw;
                }

                //delete the new profile after adding it to the result
                delete newProfile; 
            }
        }


        return result; 
    }

while smart pointers offer automatic memory management which reduce the risk of memory leaks they also provide a safer and more easier alternative to raw pointers.
ex:
 if (!found)
            {
                //if the profile is not found in banned profiles, create a new Profile object using a shared pointer
                std::shared_ptr<Profile> newProfile(new Profile(allProfiles[i].m_name, allProfiles[i].m_address, allProfiles[i].m_age));

                //validate the address of the new profile
                newProfile->validateAddress();
                //add the new profile to the result
                result += newProfile; 
            }
        }

        return result; 
    }

